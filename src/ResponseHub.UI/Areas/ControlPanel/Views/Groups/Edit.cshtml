@model Enivate.ResponseHub.UI.Areas.Admin.Models.Groups.CreateGroupModel

@{ 
	Layout = "~/Areas/ControlPanel/Views/Shared/_Layout.cshtml";
}

<h2>@ViewBag.Title</h2>

<form action="@Request.Url.LocalPath" method="post">

	@Html.AntiForgeryToken()

	@Html.ValidationSummary()

	<div class="form-group">
		<label for="Name">Name *</label>
		<div class="row">
			<div class="col-sm-8 col-md-6 col-lg-4">
				@Html.TextBoxFor(model => model.Name, new { @class = "form-control", placeholder = "Group name" })
			</div>
		</div>
		@Html.ValidationMessageFor(model => model.Name)
	</div>

	<div class="form-group">
		<label for="Service">Region *</label>
		<div class="row">
			<div class="col-sm-8 col-md-6 col-lg-4">
				@Html.DropDownListFor(model => model.Region, Model.AvailableRegions, new { @class = "form-control" })
			</div>
		</div>
		@Html.ValidationMessageFor(model => model.Region)

	</div>

	<div class="form-group">
		<label for="Name">Capcode *</label>
		<div class="row">
			<div class="col-sm-8 col-md-6 col-lg-4">
				<input type="text" readonly="readonly" class="form-control" value="@Model.Capcode" />
			</div>
		</div>
	</div>

	<script language="javascript">
		var groupCapcodes = [

			@for(int i = 0; i < Model.AvailableGroupCapcodes.Count; i++)
			{
				@Html.Raw(String.Format("{0}{{ \"id\": \"{1}\", \"name\": \"{2}\" }}",
					 i != 0 ? ", " : "",
					 Model.AvailableGroupCapcodes[i].CapcodeAddress,
					 String.Format("{0} - {1} [{2}]", Model.AvailableGroupCapcodes[i].CapcodeAddress, Model.AvailableGroupCapcodes[i].Name, Model.AvailableGroupCapcodes[i].ShortName)));
			}

		];
	</script>

	<div class="form-group">
		<label>Additional capcodes</label>
		<div class="row">
			<div class="col-lg-10">
				@if (String.IsNullOrEmpty(Model.AdditionalCapcodes) || Model.AdditionalCapcodes == ",")
				{
					<div class="capcode-list-tags hidden">
					</div>
				}
				else
				{
					<div class="capcode-list-tags">
						@foreach (string capcodeId in Model.AdditionalCapcodes.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
						{
							var capcode = Model.AvailableAdditionalCapcodes.FirstOrDefault(i => i.Id.ToString().ToLower() == capcodeId.ToLower());
							if (capcode != null)
							{
								<span class="label label-primary" data-capcode-id="@capcode.Id">@capcode.Name (@capcode.CapcodeAddress)<a></a></span>
							}
						}
					</div>
				}
			</div>
		</div>

	</div>

	<div class="form-group row">
		<div class="col-sm-10 col-md-8 col-lg-6">
			<label for="Description">Description</label>
			@Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = "5" })
		</div>
	</div>

	<h3 class="legend">HQ location</h3>

	<div class="row">
		<div class="col-xs-12">
			@if (Model.Latitude != 0 && Model.Longitude != 0)
			{
				<div class="group-hq-map bottom-10">
					<img src="/media/mapbox-static/@Model.Latitude,@Model.Longitude,15/350x200" width="350" height="200" />
					<span><i class="fa fa-fw fa-3x fa-map-marker"></i></span>
				</div>
			}
		</div>
	</div>

	<div class="form-group">
		<div class="row">
			<div class="col-sm-5 col-md-4 col-lg-3">
				Latitude * <br />
				@Html.TextBoxFor(model => model.Latitude, new { @class = "form-control loc-latitude", placeholder = "12.345678" })
				@Html.ValidationMessageFor(model => model.Latitude)
			</div>
			<div class="latitude-control col-sm-5 col-md-4 col-lg-3">
				Longitude * <br />
				@Html.TextBoxFor(model => model.Longitude, new { @class = "form-control loc-longitude", placeholder = "123.456789" })
				@Html.ValidationMessageFor(model => model.Longitude)
			</div>
		</div>
	</div>

	<div class="row">
		<div class="col-xs-12">
			<p class="hidden-xs hidden-sm visible-md visible-lg">If you don't know the coordinates of the headquarters, you can select a location on the map or use your current location.</p>
			<p class="visible-xs visible-sm hidden-md hidden-lg">If you don't know the coordinates of the headquarters you can use your current location.</p>
		</div>
		<div class="col-xs-12 hq-location-buttons">
			<button id="find-on-map" class="btn btn-default btn-icon hidden-xs hidden-sm visible-md visible-lg" type="button" data-toggle="modal" data-target="#map-modal"><i class="fa fa-map-marker"></i> Find on map</button>

			<span class="lead hidden-xs hidden-sm visible-md visible-lg"> - OR - </span>

			<button id="btn-current-location" class="btn btn-default btn-icon btn-mobile-block" type="button"><i class="fa fa-crosshairs"></i> Use current location</button>
			<i class="fa fa-refresh fa-spin current-location-spinner hidden"></i>

		</div>
	</div>

	<div class="row">
		<div class="col-lg-10 col-xl-6">
			<p class="section-help">Using the 'Use current location' may not return the most accurate coordinates. Please double check the location is correct.</p>
		</div>
	</div>

	@if (ViewBag.AddGroupAdministrator == true)
	{

		<h3 class="legend">Group administrator</h3>

		<div class="row">
			<div class="col-lg-10 col-xl-6">
				<p>Enter the email address of the administrator for this group. The email address will become the useranem for the account. If the user currently exists, you will be asked to confirm the group administrator.</p>
				<p>If the user does not exist, the user will receive an email with details on how to complete their account creation.</p>
			</div>
		</div>

		<div class="form-group">
			<label for="Name">Group administrator *</label>
			<div class="row">
				<div class="col-sm-8 col-md-6 col-lg-4">
					@Html.TextBoxFor(model => model.GroupAdministratorEmail, new { @class = "form-control", placeholder = "user@domain.com" })
				</div>
			</div>
			@Html.ValidationMessageFor(model => model.GroupAdministratorEmail)
		</div>

	}
	else
	{
		<!-- Add the Group Administration email to pass validation -->
		<input type="hidden" name="GroupAdministratorEmail" value="not_required@domain.com" />
	}

	@if (ViewBag.AddGroupAdministrator == true)
	{
		<button type="submit" class="btn btn-default">Next</button>
		<a href="/admin/groups" class="btn btn-link">Cancel</a>
	}
	else
	{
		<div class="top-20">
			<button type="submit" class="btn btn-default">Save</button>
			<a href="@Request.Url.LocalPath.ToLower().Replace("/edit", "")" class="btn btn-link">Cancel</a>
		</div>
	}

</form>

<!-- Map Modal -->
<div class="modal fade" id="map-modal" tabindex="-1" role="dialog" aria-labelledby="map-modal-label" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h4 class="modal-title" id="map-modal-label">Select your place location</h4>
			</div>
			<div class="modal-body">
				<p class="lead">Click the location on your map to set the coordinates. Once you have your place, click the 'Set coordinates' button.</p>

				<div id="map-canvas" style="height: 400px;"></div>

			</div>
			<div class="modal-footer">
				<div class="selected-coords pull-left">
					<p class="selected-coords-title pull-left"><strong>Selected coordinates</strong></p>
					<p class="current-coords lead"></p>
				</div>
				<button type="button" class="btn btn-link" data-dismiss="modal">Close</button>
				<button type="button" class="btn btn-default set-coords">Set coordinates</button>
			</div>
		</div>
	</div>
</div>